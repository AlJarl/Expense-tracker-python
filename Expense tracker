import sqlite3
import os
from datetime import datetime

def create_database():
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS expenses (id INTEGER PRIMARY KEY, date TEXT, description TEXT, amount REAL)")
    conn.commit()
    conn.close()

def add_expense(description, amount):
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute("INSERT INTO expenses (date, description, amount) VALUES (?, ?, ?)", (date, description, amount))
    conn.commit()
    conn.close()

def view_expenses():
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute("SELECT * FROM expenses")
    expenses = c.fetchall()
    conn.close()
    return expenses

def calculate_total():
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute("SELECT SUM(amount) FROM expenses")
    total = c.fetchone()[0]
    conn.close()
    return total

def main_menu():
    while True:
        print("\nExpense Tracker")
        print("1. Add Expense")
        print("2. View Expenses")
        print("3. Calculate Total")
        print("4. Quit")
        choice = input("Enter your choice: ")
        
        if choice == "1":
            description = input("Enter a description for the expense: ")
            amount = float(input("Enter the expense amount: "))
            add_expense(description, amount)
            print("Expense added successfully.")
        elif choice == "2":
            expenses = view_expenses()
            if expenses:
                print("\nExpense List:")
                for expense in expenses:
                    print(f"{expense[0]}. Date: {expense[1]}, Description: {expense[2]}, Amount: {expense[3]}")
            else:
                print("No expenses found.")
        elif choice == "3":
            total = calculate_total()
            print(f"Total expenses: {total}")
        elif choice == "4":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    create_database()
    main_menu()
